var express = require('express'),    AWS = require('aws-sdk'),    router = express.Router(),    bodyParser = require('body-parser'),    VerifyToken = require('./VerifyToken'),    Randomstring = require('randomstring'),    jwt = require('jsonwebtoken'),    config = require('../config');router.use(bodyParser.urlencoded({extended: true}));router.use(bodyParser.json());const USERS_TABLE = config.database,    dbConf = new AWS.DynamoDB({region: config.region}),    dynamoDb = new AWS.DynamoDB.DocumentClient({service: dbConf});// Registerrouter.post('/register', function (req, res) {    if (!req.body.deviceType) {        res.send('error')    }    var deviceType = req.body.deviceType,        serialNumber = req.body.serialNumber;    //Create a Token    var token = jwt.sign({deviceType: deviceType}, config.secret, {        expiresIn: 7200 // expires in 2 hours    });    const params = {        TableName: USERS_TABLE,        Item: {            userId: token,            deviceType: deviceType,            serialNumber: serialNumber        },    }    dynamoDb.put(params, function (error, result) {        if (error) {            res.status(400).json({error: 'Could not create user'});        }        res.status(200).send({auth: true, token: token, params: params});    })})//get coderouter.get('/code', VerifyToken, function (req, res, next) {    var token = req.headers['x-access-token']    var code = Randomstring.generate({        length: 6,        charset: 'numeric'    })    const params = {        TableName: USERS_TABLE,        Key: {            userId: token,        },        UpdateExpression: "set code = :c",        ExpressionAttributeValues: {            ":c": code        },        ReturnValues: "UPDATED_NEW"    }    dynamoDb.update(params, function (error, data) {        if (error) {            console.log(error);            res.status(400).json({error: error.stack, params: params});        } else {            res.status(200).json(data);        }    });});router.get('/', function (req, res, next) {    // url = GenerateUrl.generateUrl()    res.render('index.ejs', {url: config.url})})router.post('/tv', function (req, res) {    var code = req.body.code    const params = {        TableName: USERS_TABLE,        FilterExpression: "code = :c",        ExpressionAttributeValues: {            ":c": code        }    }    dynamoDb.scan(params, function (err, data) {        // console.log(err);        if (err) {            //retour page code             res.status(400).json({error: error.stack, params: params});        }        if (data) {            if (data.Items.length < 1) {                var access_token_canal = JSON.parse(req.body.canal);                // url = GenerateUrl.generateUrl()                res.redirect(config.url + '#access_token=' + access_token_canal.canal_token);            }            else {                var canal_data = JSON.parse(req.body.canal);                var CurrentDate = new Date();                CurrentDate.setMonth(CurrentDate.getMonth() + 2);                var modified_expiresin = CurrentDate.getTime();                const params2 = {                    TableName: USERS_TABLE,                    Key: {                        userId: data.Items[0].userId,                    },                    UpdateExpression: "set  IdCGAWEB= :a , IdCGA= :b , expires_in= :c ,last_name= :d, first_name= :e, id= :f , ismnjrsubscribe =:i , canalToken =:j",                    ExpressionAttributeValues: {                        ":a": canal_data.IdCGAWEB,                        ":b": canal_data.IdCGA,                        //":c": canal_data.expiresin,                        ":c": modified_expiresin.toString().substring(0, modified_expiresin.toString().length - 3),                        ":d": canal_data.last_name,                        ":e": canal_data.first_name,                        ":f": canal_data.id,                        ":i": canal_data.ismnjrsubscribe,                        ":j": canal_data.canal_token                    },                    ReturnValues: "UPDATED_NEW"                }                dynamoDb.update(params2, function (error, result) {                    if (error) {                        console.log(error);                        res.status(400).json({error: error.stack, params: params2});                    } else {                        res.status(200).render('tv.ejs');                    }                });            }        }    });});router.get('/tv', VerifyToken, function (req, res) {    var token = req.headers['x-access-token'];    var params = {        TableName: USERS_TABLE,        FilterExpression: "userId = :t",        ExpressionAttributeValues: {            ":t": token        }    }    var canaltoken = (typeof req.headers['canaltoken'] !== 'undefined') ? req.headers['canaltoken'] : '',        expiresin = (typeof req.headers['expiresin'] !== 'undefined') ? req.headers['expiresin'] : 0;    idcga = (typeof req.headers['idcga'] !== 'undefined') ? req.headers['idcga'] : '',        idcgaweb = (typeof req.headers['idcgaweb'] !== 'undefined') ? req.headers['idcgaweb'] : '',        id = (typeof req.headers['id'] !== 'undefined') ? req.headers['id'] : '',        userid = (typeof req.headers['userid'] !== 'undefined') ? req.headers['userid'] : '',        firstname = (typeof req.headers['firstname'] !== 'undefined') ? req.headers['firstname'] : '',        lastname = (typeof req.headers['lastname'] !== 'undefined') ? req.headers['lastname'] : '',        ismnjrsubscribe = (typeof req.headers['ismnjrsubscribe'] !== 'undefined') ? req.headers['ismnjrsubscribe'] : '';    if ((canaltoken.length != 0) && !(isTokentExpired(expiresin))) {        var CurrentDate = new Date();        CurrentDate.setMonth(CurrentDate.getMonth() + 2);        var modified_expiresin = CurrentDate.getTime();        res.json({            "expires_in": modified_expiresin.toString().substring(0, modified_expiresin.toString().length - 3),            "IdCGAWEB": idcgaweb,            "IdCGA": idcga,            "canalToken": canaltoken,            "id": id,            "userId": userid,            "last_name": lastname,            "first_name": firstname,            "ismnjrsubscribe": ismnjrsubscribe,            'x-access-token': token        });    } else if (isTokentExpired(expiresin)) {        res.status(500).json({msg: 'notfound'})// token expired    } else {        var params3 = {            TableName: USERS_TABLE,            FilterExpression: "userId = :t",            ExpressionAttributeValues: {                ":t": token            }        }        dynamoDb.scan(params3, function (err, data) {            if (err) {                res.json({error: err.stack, params: params3});            } else {                var obj = data.Items[0]                if (obj.hasOwnProperty('IdCGAWEB') == false) {                    res.status(500).json({msg: 'notfound'})                } else {                    var results = data.Items[0];                    var paramItem = {                        TableName: USERS_TABLE,                        Key: {                            userId: results.userId                        },                    }                    dynamoDb.delete(paramItem, function (error, result) {                        if (error) {                            res.json({err: error.stack, param: paramItem})                        }                    })                    res.json(results);                }            }        });    }})router.get('/canal', function (req, res) {    // var url = req.originalUrl;    // access_token = url.split('=').pop();    res.render('code.ejs')})router.get('/checktoken', function (req, res) {    res.json({response: true});});function getCurrentTimestamp() {    // create Date object for current location    var d = new Date(),        // convert to msec, add local time zone offset, get UTC time in msec        utc = d.getTime() + (d.getTimezoneOffset() * 60000),        // create new Date object for different city using supplied offset        nd = new Date(utc + (3600000 * 1));    // return time as a string    return nd.getTime().toString().substring(0, nd.getTime().toString().length - 3);}function isTokentExpired(expiresIn) {    return parseInt(getCurrentTimestamp()) > parseInt(expiresIn);}module.exports = router;